[{"title":"JS Browser BOM","date":"2021-06-10T01:59:00.000Z","url":"/2021/06/10/JS%20Browser%20BOM/","tags":[["js","/tags/js/"]],"categories":[["js","/categories/js/"]],"content":"浏览器对象模型（Browser Object Model (BOM)）允许 JavaScript 与浏览器对话。 JavaScript Window - 浏览器对象模型所有浏览器都支持 window 对象。它代表浏览器的窗口。 所有全局 JavaScript 对象，函数和变量自动成为 window 对象的成员。 全局变量是 window 对象的属性。 全局函数是 window 对象的方法。 窗口尺寸两个属性可用用于确定浏览器窗口的尺寸。 这两个属性都以像素返回尺寸： window.innerHeight - 浏览器窗口的内高度（以像素计） window.innerWidth - 浏览器窗口的内宽度（以像素计） JavaScript Window Screenwindow.screen 对象包含用户屏幕的信息。 JavaScript Window Locationwindow.location 对象可用于获取当前页面地址（URL）并把浏览器重定向到新页面 window.location 对象可不带 window 前缀书写。 window.location.href 返回当前页面的 href (URL) window.location.hostname 返回 web 主机的域名 window.location.pathname 返回当前页面的路径或文件名 window.location.protocol 返回使用的 web 协议（http: 或 https:） window.location.assign(url) 加载新文档 JavaScript Window Historywindow.history 对象包含浏览器历史。 window.history 对象可不带 window 书写。 为了保护用户的隐私，JavaScript 访问此对象存在限制。 history.back() - 等同于在浏览器点击后退按钮 history.forward() - 等同于在浏览器中点击前进按钮 JavaScript Window Navigatorwindow.navigator 对象包含有关访问者的信息。 navigator.appName 浏览器应用程序名称，”Netscape” 是 IE11、Chrome、Firefox 以及 Safari 的应用程序名称的统称。 navigator.appCodeName 浏览器应用程序代码名称，”Mozilla” 是 Chrome、Firefox、IE、Safari 以及 Opera 的应用程序代码名称。 navigator.platform 浏览器平台（操作系统） navigator.product 浏览器引擎 navigator.appVersion 浏览器版本 navigator.userAgent 浏览器代理 navigator.cookieEnabled cookie 是否启用 JavaScript 弹出框JavaScript 有三种类型的弹出框：警告框、确认框和提示框。 window.alert(&quot;sometext&quot;) window.confirm(&quot;sometext&quot;) return boolean window.prompt(&quot;sometext&quot;,&quot;defaultText&quot;) return string JavaScript Timing 事件JavaScript 可以在时间间隔内执行，这就是所谓的定时事件（ Timing Events）。 setTimeout(function, milliseconds) setInterval(function, milliseconds) clearTimeout() clearInterval() JavaScript CookiesCookie 让您在网页中存储用户信息。 通过 JavaScript 创建 cookie 通过 JavaScript 读取 cookie 通过 JavaScript 改变 cookie 通过 JavaScript 删除 cookie 实例"},{"title":"比较两个对象是否相等","date":"2021-06-10T01:26:00.000Z","url":"/2021/06/10/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/","tags":[["js","/tags/js/"],["前端","/tags/%E5%89%8D%E7%AB%AF/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["js","/categories/js/"]],"content":"比较两个对象是否相等比较两个对象&#123;...&#125;和&#123;...&#125;是否相等 思路为Object.prototype属性添加equals()方法 使用 原理 也可以稍加修改，使用函数进行比较 "},{"title":"线程池","date":"2021-05-31T01:16:00.000Z","url":"/2021/05/31/%E7%BA%BF%E7%A8%8B%E6%B1%A0/","tags":[["笔记","/tags/%E7%AC%94%E8%AE%B0/"],["java","/tags/java/"]],"categories":[["java","/categories/java/"]],"content":"线程池记录一个简单的线程池 创建 使用"},{"title":"JavaScript this 关键词","date":"2021-05-26T16:00:00.000Z","url":"/2021/05/27/this%20%E5%85%B3%E9%94%AE%E8%AF%8D/","tags":[["js","/tags/js/"],["前端","/tags/%E5%89%8D%E7%AB%AF/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["js","/categories/js/"]],"content":"JavaScript this 关键词this 是什么？ JavaScript this 关键词指的是它所属的对象。 它拥有不同的值，具体取决于它的使用位置： 在方法中，this 指的是所有者对象。 单独的情况下，this 指的是全局对象。 在函数中，this 指的是全局对象。 在函数中，严格模式下，this 是 undefined。 在事件中，this 指的是接收事件的元素。 像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。 方法中的 this在对象方法中，this 指的是此方法的“拥有者”。 在本页最上面的例子中，this 指的是 person 对象。 person 对象是 fullName 方法的拥有者。 单独的 this在单独使用时，拥有者是全局对象，因此 this 指的是全局对象。 在浏览器窗口中，全局对象是 [object Window]： 在严格模式中，如果单独使用，那么 this 指的是全局对象 [object Window]： 函数中的 this（默认）在 JavaScript 函数中，函数的拥有者默认绑定 this。 因此，在函数中，this指的是全局对象 [object Window]。 函数中的 this（严格模式）JavaScript 严格模式不允许默认绑定。 因此，在函数中使用时，在严格模式下，this 是未定义的（undefined）。 事件处理程序中的 this在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素： 对象方法绑定在此例中，this 是 person 对象（person 对象是该函数的“拥有者”）： 显式函数绑定call() 和 apply() 方法是预定义的 JavaScript 方法。 它们都可以用于将另一个对象作为参数调用对象方法。 您可以在本教程后面阅读有关 call() 和 apply() 的更多内容。 在下面的例子中，当使用 person2 作为参数调用 person1.fullName 时，this 将引用 person2，即使它是 person1 的方法： call() apply() bind()call()、apply()、bind() 都是用来重定义 this 对象 以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！ 由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。 从上面四个结果不难看出: call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了： call 的参数是直接放进去的，**第二第三第 n 个参数全都用逗号分隔**，直接放到后面 obj.myFun.call(db,’成都’, … ,’string’ )。 apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,[‘成都’, …, ‘string’ ])。 bind 除了**返回是函数以外，它 的参数和 call 一样**。 三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等"}]