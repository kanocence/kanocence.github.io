[{"title":"比较两个对象是否相等","date":"2021-05-27T02:08:00.000Z","url":"/2021/05/27/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/","tags":[["js","/tags/js/"]],"categories":[["js","/categories/js/"]],"content":"比较两个对象是否相等思路为Object.prototype属性添加equals()方法 使用 原理 也可以稍加修改，使用函数进行比较 "},{"title":"JavaScript this 关键词","date":"2021-05-26T16:00:00.000Z","url":"/2021/05/27/this%20%E5%85%B3%E9%94%AE%E8%AF%8D/","tags":[["js","/tags/js/"]],"categories":[["js","/categories/js/"]],"content":"JavaScript this 关键词this 是什么？JavaScript this 关键词指的是它所属的对象。 它拥有不同的值，具体取决于它的使用位置： 在方法中，this 指的是所有者对象。 单独的情况下，this 指的是全局对象。 在函数中，this 指的是全局对象。 在函数中，严格模式下，this 是 undefined。 在事件中，this 指的是接收事件的元素。 像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。 方法中的 this在对象方法中，this 指的是此方法的“拥有者”。 在本页最上面的例子中，this 指的是 person 对象。 person 对象是 fullName 方法的拥有者。 单独的 this在单独使用时，拥有者是全局对象，因此 this 指的是全局对象。 在浏览器窗口中，全局对象是 [object Window]： 在严格模式中，如果单独使用，那么 this 指的是全局对象 [object Window]： 函数中的 this（默认）在 JavaScript 函数中，函数的拥有者默认绑定 this。 因此，在函数中，this指的是全局对象 [object Window]。 函数中的 this（严格模式）JavaScript 严格模式不允许默认绑定。 因此，在函数中使用时，在严格模式下，this 是未定义的（undefined）。 事件处理程序中的 this在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素： 对象方法绑定在此例中，this 是 person 对象（person 对象是该函数的“拥有者”）： 显式函数绑定call() 和 apply() 方法是预定义的 JavaScript 方法。 它们都可以用于将另一个对象作为参数调用对象方法。 您可以在本教程后面阅读有关 call() 和 apply() 的更多内容。 在下面的例子中，当使用 person2 作为参数调用 person1.fullName 时，this 将引用 person2，即使它是 person1 的方法： call() apply() bind()call()、apply()、bind() 都是用来重定义 this 对象 以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！ 由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。 从上面四个结果不难看出: call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了： call 的参数是直接放进去的，**第二第三第 n 个参数全都用逗号分隔**，直接放到后面 obj.myFun.call(db,’成都’, … ,’string’ )。 apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,[‘成都’, …, ‘string’ ])。 bind 除了**返回是函数以外，它 的参数和 call 一样**。 三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等"}]